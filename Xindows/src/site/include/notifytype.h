//-----------------------------------------------------------------------------
//
// WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING
//
// notifytype.h
// Generated by NFPARSE.EXE from notifytype.nf
// DO NOT MODIFY BY HAND
//
// WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING
//
//-----------------------------------------------------------------------------

#if defined(_NOTIFYTYPE_ENUM_)

    NTYPE_CHARS_ADDED            = 0x00000000,
    NTYPE_CHARS_DELETED          = 0x00000001,
    NTYPE_CHARS_RESIZE           = 0x00000002,
    NTYPE_CHARS_INVALIDATE       = 0x00000003,
    NTYPE_ELEMENTS_ADDED         = 0x00000004,
    NTYPE_ELEMENTS_DELETED       = 0x00000005,
    NTYPE_ELEMENT_RESIZE         = 0x00000006,
    NTYPE_ELEMENT_REMEASURE      = 0x00000007,
    NTYPE_ELEMENT_RESIZEANDREMEASURE = 0x00000008,
    NTYPE_ELEMENT_SIZECHANGED    = 0x00000009,
    NTYPE_ELEMENT_POSITIONCHANGED = 0x0000000A,
    NTYPE_ELEMENT_ADD_ADORNER    = 0x0000000B,
    NTYPE_ELEMENT_ZCHANGE        = 0x0000000C,
    NTYPE_ELEMENT_REPOSITION     = 0x0000000D,
    NTYPE_RANGE_ENSURERECALC     = 0x0000000E,
    NTYPE_ELEMENT_ENSURERECALC   = 0x0000000F,
    NTYPE_ELEMENT_INVALIDATE     = 0x00000010,
    NTYPE_ELEMENT_INVAL_Z_DESCENDANTS = 0x00000011,
    NTYPE_ELEMENT_MINMAX         = 0x00000012,
    NTYPE_ELEMENT_ENTERTREE      = 0x00000013,
    NTYPE_ELEMENT_EXITTREE_1     = 0x00000014,
    NTYPE_ELEMENT_EXITTREE_2     = 0x00000015,
    NTYPE_ELEMENT_QUERYFOCUSSABLE = 0x00000016,
    NTYPE_ELEMENT_QUERYTABBABLE  = 0x00000017,
    NTYPE_ELEMENT_QUERYMNEMONICTARGET = 0x00000018,
    NTYPE_ELEMENT_SETTINGFOCUS   = 0x00000019,
    NTYPE_ELEMENT_SETFOCUS       = 0x0000001A,
    NTYPE_ELEMENT_SETFOCUSFAILED = 0x0000001B,
    NTYPE_ELEMENT_GOTMNEMONIC    = 0x0000001C,
    NTYPE_ELEMENT_LOSTMNEMONIC   = 0x0000001D,
    NTYPE_DISPLAY_CHANGE         = 0x0000001E,
    NTYPE_VISIBILITY_CHANGE      = 0x0000001F,
    NTYPE_ZPARENT_CHANGE         = 0x00000020,
    NTYPE_MEASURED_RANGE         = 0x00000021,
    NTYPE_TRANSLATED_RANGE       = 0x00000022,
    NTYPE_UPDATE_DOC_DIRTY       = 0x00000023,
    NTYPE_FREEZE_EVENTS          = 0x00000024,
    NTYPE_AMBIENT_PROP_CHANGE    = 0x00000025,
    NTYPE_UPDATE_VIEW_CACHE      = 0x00000026,
    NTYPE_UPDATE_DOC_UPTODATE    = 0x00000027,
    NTYPE_DOC_STATE_CHANGE_1     = 0x00000028,
    NTYPE_DOC_STATE_CHANGE_2     = 0x00000029,
    NTYPE_SELECT_CHANGE          = 0x0000002A,
    NTYPE_STOP_1                 = 0x0000002B,
    NTYPE_STOP_2                 = 0x0000002C,
    NTYPE_ENABLE_INTERACTION_1   = 0x0000002D,
    NTYPE_ENABLE_INTERACTION_2   = 0x0000002E,
    NTYPE_ACTIVE_MOVIE           = 0x0000002F,
    NTYPE_BEFORE_UNLOAD          = 0x00000030,
    NTYPE_BEFORE_REFRESH         = 0x00000031,
    NTYPE_EDIT_MODE_CHANGE       = 0x00000032,
    NTYPE_SET_CODEPAGE           = 0x00000033,
    NTYPE_GET_FRAME_ZONE         = 0x00000034,
    NTYPE_DOC_END_PARSE          = 0x00000035,
    NTYPE_RELEASE_EXTERNAL_OBJECTS = 0x00000036,
    NTYPE_AREA_FOCUS             = 0x00000037,
    NTYPE_AREA_TABINDEX_CHANGE   = 0x00000038,
    NTYPE_GET_START_ELEMENT      = 0x00000039,
    NTYPE_COMMAND                = 0x0000003A,
    NTYPE_SNAP_SHOT_SAVE         = 0x0000003B,
    NTYPE_FAVORITES_SAVE         = 0x0000003C,
    NTYPE_FAVORITES_LOAD         = 0x0000003D,
    NTYPE_XTAG_HISTORY_SAVE      = 0x0000003E,
    NTYPE_XTAG_HISTORY_LOAD      = 0x0000003F,
    NTYPE_KILL_SELECTION         = 0x00000040,
    NTYPE_SAVE_HISTORY_1         = 0x00000041,
    NTYPE_SAVE_HISTORY_2         = 0x00000042,
    NTYPE_DELAY_LOAD_HISTORY     = 0x00000043,
    NTYPE_CLEAR_DIRTY            = 0x00000044,
    NTYPE_END_PARSE              = 0x00000045,
    NTYPE_CLEAR_FORMAT_CACHES    = 0x00000046,
    NTYPE_RECOMPUTE_BEHAVIOR     = 0x00000047,
    NTYPE_VIEW_ATTACHELEMENT     = 0x00000048,
    NTYPE_VIEW_DETACHELEMENT     = 0x00000049,
    NTYPE_BASE_URL_CHANGE        = 0x0000004A,
    NTYPE_ZERO_GRAY_CHANGE       = 0x0000004B,
#undef _NOTIFYTYPE_ENUM_


#elif defined(_NOTIFYTYPE_TABLE_)

/* NTYPE_CHARS_ADDED            */   NFLAGS_SELF | NFLAGS_ANCESTORS                      | NFLAGS_TREELEVEL | NFLAGS_TEXTCHANGE                                                                                                                                                                                                                                                                                                                                                                                                                         ,
/* NTYPE_CHARS_DELETED          */   NFLAGS_SELF | NFLAGS_ANCESTORS                      | NFLAGS_TREELEVEL | NFLAGS_TEXTCHANGE                                                                                                                                                                                                                                                                                                                                                                                                                         ,
/* NTYPE_CHARS_RESIZE           */   NFLAGS_SELF | NFLAGS_ANCESTORS                                                                                 | NFLAGS_LAYOUTCHANGE                      | NFLAGS_FOR_LAYOUTS                                                                        | NFLAGS_SENDUNTILHANDLED                                                                                                                                                                                                                                    ,
/* NTYPE_CHARS_INVALIDATE       */   NFLAGS_SELF | NFLAGS_ANCESTORS                                                                                 | NFLAGS_LAYOUTCHANGE                      | NFLAGS_FOR_LAYOUTS                                                                        | NFLAGS_SENDUNTILHANDLED                                                                                                                                                                                                                                    ,
/* NTYPE_ELEMENTS_ADDED         */                                                         NFLAGS_TREELEVEL                     | NFLAGS_TREECHANGE                                                                                                                                                                                                                                                                                                                                                                                                     ,
/* NTYPE_ELEMENTS_DELETED       */                                                         NFLAGS_TREELEVEL                     | NFLAGS_TREECHANGE                                                                                                                                                                                                                                                                                                                                                                                                     ,
/* NTYPE_ELEMENT_RESIZE         */                 NFLAGS_ANCESTORS                      | NFLAGS_TREELEVEL                                         | NFLAGS_LAYOUTCHANGE                      | NFLAGS_FOR_LAYOUTS                                                                        | NFLAGS_SENDUNTILHANDLED | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_ELEMENT_REMEASURE      */   NFLAGS_SELF | NFLAGS_ANCESTORS                      | NFLAGS_TREELEVEL                                         | NFLAGS_LAYOUTCHANGE                      | NFLAGS_FOR_LAYOUTS                                                                        | NFLAGS_SENDUNTILHANDLED | NFLAGS_LAZYRANGE | NFLAGS_CLEANCHANGE                                                                                                                                                                                            ,
/* NTYPE_ELEMENT_RESIZEANDREMEASURE*/                 NFLAGS_ANCESTORS                      | NFLAGS_TREELEVEL                                         | NFLAGS_LAYOUTCHANGE                      | NFLAGS_FOR_LAYOUTS                                                                        | NFLAGS_SENDUNTILHANDLED | NFLAGS_LAZYRANGE | NFLAGS_CLEANCHANGE                                                                                                                                                                                            ,
/* NTYPE_ELEMENT_SIZECHANGED    */                                                         NFLAGS_TREELEVEL                                         | NFLAGS_LAYOUTCHANGE                                                                                                                  | NFLAGS_SENDUNTILHANDLED | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_ELEMENT_POSITIONCHANGED*/                                                         NFLAGS_TREELEVEL                                         | NFLAGS_LAYOUTCHANGE                                                                                                                  | NFLAGS_SENDUNTILHANDLED | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_ELEMENT_ADD_ADORNER    */   NFLAGS_SELF | NFLAGS_ANCESTORS                                                                                 | NFLAGS_LAYOUTCHANGE                                                                                                                  | NFLAGS_SENDUNTILHANDLED | NFLAGS_LAZYRANGE | NFLAGS_CLEANCHANGE                                                                                                                                                                                            ,
/* NTYPE_ELEMENT_ZCHANGE        */                 NFLAGS_ANCESTORS                                                                                 | NFLAGS_LAYOUTCHANGE                      | NFLAGS_FOR_LAYOUTS                                                                        | NFLAGS_SENDUNTILHANDLED | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_ELEMENT_REPOSITION     */                 NFLAGS_ANCESTORS                                                                                 | NFLAGS_LAYOUTCHANGE                      | NFLAGS_FOR_LAYOUTS                                                                        | NFLAGS_SENDUNTILHANDLED | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_RANGE_ENSURERECALC     */   NFLAGS_SELF | NFLAGS_ANCESTORS                      | NFLAGS_TREELEVEL                                                                                    | NFLAGS_FOR_LAYOUTS                                                                        | NFLAGS_SENDUNTILHANDLED | NFLAGS_LAZYRANGE | NFLAGS_CLEANCHANGE                                                 | NFLAGS_DONOTBLOCK                                                                                                                        ,
/* NTYPE_ELEMENT_ENSURERECALC   */   NFLAGS_SELF | NFLAGS_ANCESTORS                      | NFLAGS_TREELEVEL                                                                                    | NFLAGS_FOR_LAYOUTS                                                                        | NFLAGS_SENDUNTILHANDLED | NFLAGS_LAZYRANGE | NFLAGS_CLEANCHANGE                                                 | NFLAGS_DONOTBLOCK                                                                                                                        ,
/* NTYPE_ELEMENT_INVALIDATE     */   NFLAGS_SELF | NFLAGS_ANCESTORS                                                                                 | NFLAGS_LAYOUTCHANGE                      | NFLAGS_FOR_LAYOUTS                                                                        | NFLAGS_SENDUNTILHANDLED | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_ELEMENT_INVAL_Z_DESCENDANTS*/   NFLAGS_SELF                    | NFLAGS_DESCENDENTS | NFLAGS_TREELEVEL                                         | NFLAGS_LAYOUTCHANGE                                                                                         | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                                                                                                                                          | NFLAGS_ZPARENTSONLY                                  ,
/* NTYPE_ELEMENT_MINMAX         */   NFLAGS_SELF | NFLAGS_ANCESTORS                                                                                 | NFLAGS_LAYOUTCHANGE                      | NFLAGS_FOR_LAYOUTS                                                                        | NFLAGS_SENDUNTILHANDLED | NFLAGS_LAZYRANGE | NFLAGS_CLEANCHANGE                                                                                                                                                                                            ,
/* NTYPE_ELEMENT_ENTERTREE      */   NFLAGS_SELF                                                                                | NFLAGS_TREECHANGE                                                                                                                                                                  | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_ELEMENT_EXITTREE_1     */   NFLAGS_SELF                                                                                | NFLAGS_TREECHANGE                                                                                                                                                                  | NFLAGS_LAZYRANGE                                                                                                                                                                                            | NFLAGS_SC_AVAILABLE,
/* NTYPE_ELEMENT_EXITTREE_2     */   NFLAGS_SELF                                                                                | NFLAGS_TREECHANGE                                                                                                                                                                  | NFLAGS_LAZYRANGE                                                                                                                                                                                | NFLAGS_SC                      ,
/* NTYPE_ELEMENT_QUERYFOCUSSABLE*/   NFLAGS_SELF                                                                                                                                                                                                                  | NFLAGS_FOR_ALLELEMENTS                                                                                                                                                                                                                                                              ,
/* NTYPE_ELEMENT_QUERYTABBABLE  */   NFLAGS_SELF                                                                                                                                                                                                                  | NFLAGS_FOR_ALLELEMENTS                                                                                                                                                                                                                                                              ,
/* NTYPE_ELEMENT_QUERYMNEMONICTARGET*/   NFLAGS_SELF                                                                                                                                                                                                                  | NFLAGS_FOR_ALLELEMENTS                                                                                                                                                                                                                                                              ,
/* NTYPE_ELEMENT_SETTINGFOCUS   */   NFLAGS_SELF                                                                                                                                                                                                                  | NFLAGS_FOR_ALLELEMENTS                                                                                                                                                                                                                                                              ,
/* NTYPE_ELEMENT_SETFOCUS       */   NFLAGS_SELF                                                                                                                                                                                                                  | NFLAGS_FOR_ALLELEMENTS                                                                                                                                                                                                                                                              ,
/* NTYPE_ELEMENT_SETFOCUSFAILED */   NFLAGS_SELF                                                                                                                                                                                                                  | NFLAGS_FOR_ALLELEMENTS                                                                                                                                                                                                                                                              ,
/* NTYPE_ELEMENT_GOTMNEMONIC    */   NFLAGS_SELF                                                                                                                                                                                                                  | NFLAGS_FOR_ALLELEMENTS                                                                                                                                                                                                                                                              ,
/* NTYPE_ELEMENT_LOSTMNEMONIC   */   NFLAGS_SELF                                                                                                                                                                                                                  | NFLAGS_FOR_ALLELEMENTS                                                                                                                                                                                                                                                              ,
/* NTYPE_DISPLAY_CHANGE         */   NFLAGS_SELF                    | NFLAGS_DESCENDENTS | NFLAGS_TREELEVEL                                         | NFLAGS_LAYOUTCHANGE                                                                                                                                            | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_VISIBILITY_CHANGE      */   NFLAGS_SELF                    | NFLAGS_DESCENDENTS                                                            | NFLAGS_LAYOUTCHANGE                                                                                                                                            | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_ZPARENT_CHANGE         */                                    NFLAGS_DESCENDENTS                                                                                                                                                  | NFLAGS_FOR_POSITIONED                                                    | NFLAGS_LAZYRANGE                                                                                                                                                          | NFLAGS_ZPARENTSONLY                                  ,
/* NTYPE_MEASURED_RANGE         */                                                         NFLAGS_TREELEVEL                                                                                                                               | NFLAGS_FOR_POSITIONED                                                                                                                                                                                                              | NFLAGS_AUTOONLY | NFLAGS_ZPARENTSONLY                                  ,
/* NTYPE_TRANSLATED_RANGE       */                                    NFLAGS_DESCENDENTS | NFLAGS_TREELEVEL                                                                                                                               | NFLAGS_FOR_POSITIONED                                                                                                                                                                                                              | NFLAGS_AUTOONLY | NFLAGS_ZPARENTSONLY                                  ,
/* NTYPE_UPDATE_DOC_DIRTY       */                                    NFLAGS_DESCENDENTS                                                                                  | NFLAGS_FOR_ACTIVEX                                                                                                                       | NFLAGS_LAZYRANGE | NFLAGS_CLEANCHANGE                                                                                                                                                                                            ,
/* NTYPE_FREEZE_EVENTS          */                                    NFLAGS_DESCENDENTS                                                                                  | NFLAGS_FOR_ACTIVEX                                                                                                                       | NFLAGS_LAZYRANGE | NFLAGS_CLEANCHANGE                                                 | NFLAGS_DONOTBLOCK                                                                                                                        ,
/* NTYPE_AMBIENT_PROP_CHANGE    */                                    NFLAGS_DESCENDENTS                                                                                                                                                                          | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_UPDATE_VIEW_CACHE      */                                    NFLAGS_DESCENDENTS                                                                                  | NFLAGS_FOR_ACTIVEX                                                                                                                       | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_UPDATE_DOC_UPTODATE    */                                    NFLAGS_DESCENDENTS                                                                                  | NFLAGS_FOR_ACTIVEX                                                                                                                       | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_DOC_STATE_CHANGE_1     */                                    NFLAGS_DESCENDENTS                                                                                                                                                                          | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE | NFLAGS_CLEANCHANGE                                                                                                                                                                       | NFLAGS_SC_AVAILABLE,
/* NTYPE_DOC_STATE_CHANGE_2     */                                    NFLAGS_DESCENDENTS                                                                                                                                                                          | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE | NFLAGS_CLEANCHANGE                                                                                                                                                           | NFLAGS_SC                      ,
/* NTYPE_SELECT_CHANGE          */   NFLAGS_SELF                                                                                                                                                                                                                  | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_STOP_1                 */                                    NFLAGS_DESCENDENTS                                                                                                                                                                          | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                                                                                                                                                                            | NFLAGS_SC_AVAILABLE,
/* NTYPE_STOP_2                 */                                    NFLAGS_DESCENDENTS                                                                                                                                                                          | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                                                                                                                                                                | NFLAGS_SC                      ,
/* NTYPE_ENABLE_INTERACTION_1   */                                    NFLAGS_DESCENDENTS                                                                                                                                                                          | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                                                                                                                                                                            | NFLAGS_SC_AVAILABLE,
/* NTYPE_ENABLE_INTERACTION_2   */                                    NFLAGS_DESCENDENTS                                                                                                                                                                          | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                                                                                                                                                                | NFLAGS_SC                      ,
/* NTYPE_ACTIVE_MOVIE           */                                    NFLAGS_DESCENDENTS                                                                                                                                                                          | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_BEFORE_UNLOAD          */                                    NFLAGS_DESCENDENTS                                                                                  | NFLAGS_FOR_ACTIVEX                                                                                                                       | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_BEFORE_REFRESH         */                                    NFLAGS_DESCENDENTS                                                                                  | NFLAGS_FOR_ACTIVEX                                                                                                                       | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_EDIT_MODE_CHANGE       */                                    NFLAGS_DESCENDENTS                                                                                                                                                                          | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_SET_CODEPAGE           */                                    NFLAGS_DESCENDENTS                                                                                                                                                                          | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_GET_FRAME_ZONE         */                                    NFLAGS_DESCENDENTS                                                                                  | NFLAGS_FOR_ACTIVEX                                                                                                                       | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_DOC_END_PARSE          */                                    NFLAGS_DESCENDENTS                                                                                                                                                                          | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE | NFLAGS_CLEANCHANGE                                                                                                                                                                                            ,
/* NTYPE_RELEASE_EXTERNAL_OBJECTS*/                                    NFLAGS_DESCENDENTS                                                                                                                                                                          | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_AREA_FOCUS             */                                    NFLAGS_DESCENDENTS                                                                                                                                                                          | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_AREA_TABINDEX_CHANGE   */                                    NFLAGS_DESCENDENTS                                                                                                                                                                          | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_GET_START_ELEMENT      */   NFLAGS_SELF                                                                                                                                                                                                                  | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_COMMAND                */                                    NFLAGS_DESCENDENTS                                                                                                                                                                          | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_SNAP_SHOT_SAVE         */                                    NFLAGS_DESCENDENTS                                                                                                                                                                          | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_FAVORITES_SAVE         */                                    NFLAGS_DESCENDENTS                                                                                                                                                                          | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_FAVORITES_LOAD         */                                    NFLAGS_DESCENDENTS                                                                                                                                                                          | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_XTAG_HISTORY_SAVE      */                                    NFLAGS_DESCENDENTS                                                                                                                                                                          | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_XTAG_HISTORY_LOAD      */                                    NFLAGS_DESCENDENTS                                                                                                                                                                          | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_KILL_SELECTION         */                                    NFLAGS_DESCENDENTS                                                                                                                                                                          | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_SAVE_HISTORY_1         */                                    NFLAGS_DESCENDENTS                                                                                                                                                                          | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                             | NFLAGS_SYNCHRONOUSONLY                                                                                                                       | NFLAGS_SC_AVAILABLE,
/* NTYPE_SAVE_HISTORY_2         */                                    NFLAGS_DESCENDENTS                                                                                                                                                                          | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                             | NFLAGS_SYNCHRONOUSONLY                                                                                                           | NFLAGS_SC                      ,
/* NTYPE_DELAY_LOAD_HISTORY     */                                    NFLAGS_DESCENDENTS                                                                                                                                                                          | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_CLEAR_DIRTY            */   NFLAGS_SELF                                                                                                                                                                                                                  | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_END_PARSE              */   NFLAGS_SELF                                                                                                                                                                                                                  | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_CLEAR_FORMAT_CACHES    */                                    NFLAGS_DESCENDENTS                                                            | NFLAGS_LAYOUTCHANGE                      | NFLAGS_FOR_LAYOUTS                                               | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_RECOMPUTE_BEHAVIOR     */                                    NFLAGS_DESCENDENTS                                                                                                                                                                          | NFLAGS_FOR_ALLELEMENTS                           | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_VIEW_ATTACHELEMENT     */                                                         NFLAGS_TREELEVEL                                         | NFLAGS_LAYOUTCHANGE                                                                                                                                            | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_VIEW_DETACHELEMENT     */                                                         NFLAGS_TREELEVEL                                         | NFLAGS_LAYOUTCHANGE                                                                                                                                            | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
/* NTYPE_BASE_URL_CHANGE        */                                    NFLAGS_DESCENDENTS                                                                                                                                                                          | NFLAGS_FOR_ALLELEMENTS                                                                                                                                                                                                                                                              ,
/* NTYPE_ZERO_GRAY_CHANGE       */                                    NFLAGS_DESCENDENTS                                                                                                       | NFLAGS_FOR_LAYOUTS                                                                                                  | NFLAGS_LAZYRANGE                                                                                                                                                                                                                 ,
#undef _NOTIFYTYPE_TABLE_


#elif defined(_NOTIFYTYPE_NAMES_)

        case NTYPE_CHARS_ADDED:
            pch = _T("CHARS_ADDED");
            break;
        case NTYPE_CHARS_DELETED:
            pch = _T("CHARS_DELETED");
            break;
        case NTYPE_CHARS_RESIZE:
            pch = _T("CHARS_RESIZE");
            break;
        case NTYPE_CHARS_INVALIDATE:
            pch = _T("CHARS_INVALIDATE");
            break;
        case NTYPE_ELEMENTS_ADDED:
            pch = _T("ELEMENTS_ADDED");
            break;
        case NTYPE_ELEMENTS_DELETED:
            pch = _T("ELEMENTS_DELETED");
            break;
        case NTYPE_ELEMENT_RESIZE:
            pch = _T("ELEMENT_RESIZE");
            break;
        case NTYPE_ELEMENT_REMEASURE:
            pch = _T("ELEMENT_REMEASURE");
            break;
        case NTYPE_ELEMENT_RESIZEANDREMEASURE:
            pch = _T("ELEMENT_RESIZEANDREMEASURE");
            break;
        case NTYPE_ELEMENT_SIZECHANGED:
            pch = _T("ELEMENT_SIZECHANGED");
            break;
        case NTYPE_ELEMENT_POSITIONCHANGED:
            pch = _T("ELEMENT_POSITIONCHANGED");
            break;
        case NTYPE_ELEMENT_ADD_ADORNER:
            pch = _T("ELEMENT_ADD_ADORNER");
            break;
        case NTYPE_ELEMENT_ZCHANGE:
            pch = _T("ELEMENT_ZCHANGE");
            break;
        case NTYPE_ELEMENT_REPOSITION:
            pch = _T("ELEMENT_REPOSITION");
            break;
        case NTYPE_RANGE_ENSURERECALC:
            pch = _T("RANGE_ENSURERECALC");
            break;
        case NTYPE_ELEMENT_ENSURERECALC:
            pch = _T("ELEMENT_ENSURERECALC");
            break;
        case NTYPE_ELEMENT_INVALIDATE:
            pch = _T("ELEMENT_INVALIDATE");
            break;
        case NTYPE_ELEMENT_INVAL_Z_DESCENDANTS:
            pch = _T("ELEMENT_INVAL_Z_DESCENDANTS");
            break;
        case NTYPE_ELEMENT_MINMAX:
            pch = _T("ELEMENT_MINMAX");
            break;
        case NTYPE_ELEMENT_ENTERTREE:
            pch = _T("ELEMENT_ENTERTREE");
            break;
        case NTYPE_ELEMENT_EXITTREE_1:
            pch = _T("ELEMENT_EXITTREE_1");
            break;
        case NTYPE_ELEMENT_EXITTREE_2:
            pch = _T("ELEMENT_EXITTREE_2");
            break;
        case NTYPE_ELEMENT_QUERYFOCUSSABLE:
            pch = _T("ELEMENT_QUERYFOCUSSABLE");
            break;
        case NTYPE_ELEMENT_QUERYTABBABLE:
            pch = _T("ELEMENT_QUERYTABBABLE");
            break;
        case NTYPE_ELEMENT_QUERYMNEMONICTARGET:
            pch = _T("ELEMENT_QUERYMNEMONICTARGET");
            break;
        case NTYPE_ELEMENT_SETTINGFOCUS:
            pch = _T("ELEMENT_SETTINGFOCUS");
            break;
        case NTYPE_ELEMENT_SETFOCUS:
            pch = _T("ELEMENT_SETFOCUS");
            break;
        case NTYPE_ELEMENT_SETFOCUSFAILED:
            pch = _T("ELEMENT_SETFOCUSFAILED");
            break;
        case NTYPE_ELEMENT_GOTMNEMONIC:
            pch = _T("ELEMENT_GOTMNEMONIC");
            break;
        case NTYPE_ELEMENT_LOSTMNEMONIC:
            pch = _T("ELEMENT_LOSTMNEMONIC");
            break;
        case NTYPE_DISPLAY_CHANGE:
            pch = _T("DISPLAY_CHANGE");
            break;
        case NTYPE_VISIBILITY_CHANGE:
            pch = _T("VISIBILITY_CHANGE");
            break;
        case NTYPE_ZPARENT_CHANGE:
            pch = _T("ZPARENT_CHANGE");
            break;
        case NTYPE_MEASURED_RANGE:
            pch = _T("MEASURED_RANGE");
            break;
        case NTYPE_TRANSLATED_RANGE:
            pch = _T("TRANSLATED_RANGE");
            break;
        case NTYPE_UPDATE_DOC_DIRTY:
            pch = _T("UPDATE_DOC_DIRTY");
            break;
        case NTYPE_FREEZE_EVENTS:
            pch = _T("FREEZE_EVENTS");
            break;
        case NTYPE_AMBIENT_PROP_CHANGE:
            pch = _T("AMBIENT_PROP_CHANGE");
            break;
        case NTYPE_UPDATE_VIEW_CACHE:
            pch = _T("UPDATE_VIEW_CACHE");
            break;
        case NTYPE_UPDATE_DOC_UPTODATE:
            pch = _T("UPDATE_DOC_UPTODATE");
            break;
        case NTYPE_DOC_STATE_CHANGE_1:
            pch = _T("DOC_STATE_CHANGE_1");
            break;
        case NTYPE_DOC_STATE_CHANGE_2:
            pch = _T("DOC_STATE_CHANGE_2");
            break;
        case NTYPE_SELECT_CHANGE:
            pch = _T("SELECT_CHANGE");
            break;
        case NTYPE_STOP_1:
            pch = _T("STOP_1");
            break;
        case NTYPE_STOP_2:
            pch = _T("STOP_2");
            break;
        case NTYPE_ENABLE_INTERACTION_1:
            pch = _T("ENABLE_INTERACTION_1");
            break;
        case NTYPE_ENABLE_INTERACTION_2:
            pch = _T("ENABLE_INTERACTION_2");
            break;
        case NTYPE_ACTIVE_MOVIE:
            pch = _T("ACTIVE_MOVIE");
            break;
        case NTYPE_BEFORE_UNLOAD:
            pch = _T("BEFORE_UNLOAD");
            break;
        case NTYPE_BEFORE_REFRESH:
            pch = _T("BEFORE_REFRESH");
            break;
        case NTYPE_EDIT_MODE_CHANGE:
            pch = _T("EDIT_MODE_CHANGE");
            break;
        case NTYPE_SET_CODEPAGE:
            pch = _T("SET_CODEPAGE");
            break;
        case NTYPE_GET_FRAME_ZONE:
            pch = _T("GET_FRAME_ZONE");
            break;
        case NTYPE_DOC_END_PARSE:
            pch = _T("DOC_END_PARSE");
            break;
        case NTYPE_RELEASE_EXTERNAL_OBJECTS:
            pch = _T("RELEASE_EXTERNAL_OBJECTS");
            break;
        case NTYPE_AREA_FOCUS:
            pch = _T("AREA_FOCUS");
            break;
        case NTYPE_AREA_TABINDEX_CHANGE:
            pch = _T("AREA_TABINDEX_CHANGE");
            break;
        case NTYPE_GET_START_ELEMENT:
            pch = _T("GET_START_ELEMENT");
            break;
        case NTYPE_COMMAND:
            pch = _T("COMMAND");
            break;
        case NTYPE_SNAP_SHOT_SAVE:
            pch = _T("SNAP_SHOT_SAVE");
            break;
        case NTYPE_FAVORITES_SAVE:
            pch = _T("FAVORITES_SAVE");
            break;
        case NTYPE_FAVORITES_LOAD:
            pch = _T("FAVORITES_LOAD");
            break;
        case NTYPE_XTAG_HISTORY_SAVE:
            pch = _T("XTAG_HISTORY_SAVE");
            break;
        case NTYPE_XTAG_HISTORY_LOAD:
            pch = _T("XTAG_HISTORY_LOAD");
            break;
        case NTYPE_KILL_SELECTION:
            pch = _T("KILL_SELECTION");
            break;
        case NTYPE_SAVE_HISTORY_1:
            pch = _T("SAVE_HISTORY_1");
            break;
        case NTYPE_SAVE_HISTORY_2:
            pch = _T("SAVE_HISTORY_2");
            break;
        case NTYPE_DELAY_LOAD_HISTORY:
            pch = _T("DELAY_LOAD_HISTORY");
            break;
        case NTYPE_CLEAR_DIRTY:
            pch = _T("CLEAR_DIRTY");
            break;
        case NTYPE_END_PARSE:
            pch = _T("END_PARSE");
            break;
        case NTYPE_CLEAR_FORMAT_CACHES:
            pch = _T("CLEAR_FORMAT_CACHES");
            break;
        case NTYPE_RECOMPUTE_BEHAVIOR:
            pch = _T("RECOMPUTE_BEHAVIOR");
            break;
        case NTYPE_VIEW_ATTACHELEMENT:
            pch = _T("VIEW_ATTACHELEMENT");
            break;
        case NTYPE_VIEW_DETACHELEMENT:
            pch = _T("VIEW_DETACHELEMENT");
            break;
        case NTYPE_BASE_URL_CHANGE:
            pch = _T("BASE_URL_CHANGE");
            break;
        case NTYPE_ZERO_GRAY_CHANGE:
            pch = _T("ZERO_GRAY_CHANGE");
            break;
#undef _NOTIFYTYPE_NAMES_


#elif defined(_NOTIFYTYPE_PROTO_)

        void CharsAdded(
             long        cp,
             long        cch,
             CTreeNode * pNode  = NULL);

        void CharsDeleted(
             long        cp,
             long        cch,
             CTreeNode * pNode  = NULL);

        void CharsResize(
             long        cp,
             long        cch,
             CTreeNode * pNode  = NULL);

        void CharsInvalidate(
             long        cp,
             long        cch,
             CTreeNode * pNode  = NULL);

        void ElementsAdded(
             long        siElement,
             long        cElements);

        void ElementsDeleted(
             long        siElement,
             long        cElements);

        void ElementResize(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void ElementRemeasure(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void ElementResizeandremeasure(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void ElementSizechanged(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void ElementPositionchanged(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void ElementAddAdorner(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void ElementZchange(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void ElementReposition(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void RangeEnsurerecalc(
             long        cp,
             long        cch,
             CTreeNode * pNode  = NULL);

        void ElementEnsurerecalc(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void ElementInvalidate(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void ElementInvalZDescendants(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void ElementMinmax(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void ElementEntertree(
             CElement *  pElement,
             CTreeNode * pNode  = NULL,
             DWORD       grfFlags = 0);

        void ElementExittree1(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void ElementExittree2(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void ElementQueryfocussable(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void ElementQuerytabbable(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void ElementQuerymnemonictarget(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void ElementSettingfocus(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void ElementSetfocus(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void ElementSetfocusfailed(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void ElementGotmnemonic(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void ElementLostmnemonic(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void DisplayChange(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void VisibilityChange(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void ZparentChange(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void MeasuredRange(
             long        cp,
             long        cch,
             DWORD       grfFlags = 0);

        void TranslatedRange(
             long        cp,
             long        cch,
             DWORD       grfFlags = 0);

        void UpdateDocDirty(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void FreezeEvents(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void AmbientPropChange(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void UpdateViewCache(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void UpdateDocUptodate(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void DocStateChange1(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void DocStateChange2(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void SelectChange(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void Stop1(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void Stop2(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void EnableInteraction1(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void EnableInteraction2(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void ActiveMovie(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void BeforeUnload(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void BeforeRefresh(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void EditModeChange(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void SetCodepage(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void GetFrameZone(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void DocEndParse(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void ReleaseExternalObjects(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void AreaFocus(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void AreaTabindexChange(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void GetStartElement(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void Command(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void SnapShotSave(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void FavoritesSave(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void FavoritesLoad(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void XtagHistorySave(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void XtagHistoryLoad(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void KillSelection(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void SaveHistory1(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void SaveHistory2(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void DelayLoadHistory(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void ClearDirty(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void EndParse(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void ClearFormatCaches(
             CElement *  pElement,
             void *      pvData = NULL,
             DWORD       grfFlags = 0);

        void RecomputeBehavior(
             CElement *  pElement,
             DWORD       grfFlags = 0);

        void ViewAttachelement(
             CElement *  pElement);

        void ViewDetachelement(
             CElement *  pElement);

        void BaseUrlChange(
             CElement *  pElement);

        void ZeroGrayChange(
             CElement *  pElement);

#undef _NOTIFYTYPE_PROTO_


#elif defined(_NOTIFYTYPE_INLINE_)

inline void
CNotification::CharsAdded(
    long        cp,
    long        cch,
    CTreeNode * pNode)
{
    InitializeCp(NTYPE_CHARS_ADDED,
               cp,
               cch,
               pNode,
               NULL,
               0);
}

inline void
CNotification::CharsDeleted(
    long        cp,
    long        cch,
    CTreeNode * pNode)
{
    InitializeCp(NTYPE_CHARS_DELETED,
               cp,
               cch,
               pNode,
               NULL,
               0);
}

inline void
CNotification::CharsResize(
    long        cp,
    long        cch,
    CTreeNode * pNode)
{
    InitializeCp(NTYPE_CHARS_RESIZE,
               cp,
               cch,
               pNode,
               NULL,
               0);
}

inline void
CNotification::CharsInvalidate(
    long        cp,
    long        cch,
    CTreeNode * pNode)
{
    InitializeCp(NTYPE_CHARS_INVALIDATE,
               cp,
               cch,
               pNode,
               NULL,
               0);
}

inline void
CNotification::ElementsAdded(
    long        siElement,
    long        cElements)
{
    InitializeSi(NTYPE_ELEMENTS_ADDED,
               siElement,
               cElements,
               NULL,
               NULL,
               0);
}

inline void
CNotification::ElementsDeleted(
    long        siElement,
    long        cElements)
{
    InitializeSi(NTYPE_ELEMENTS_DELETED,
               siElement,
               cElements,
               NULL,
               NULL,
               0);
}

inline void
CNotification::ElementResize(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_ELEMENT_RESIZE,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::ElementRemeasure(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_ELEMENT_REMEASURE,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::ElementResizeandremeasure(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_ELEMENT_RESIZEANDREMEASURE,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::ElementSizechanged(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_ELEMENT_SIZECHANGED,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::ElementPositionchanged(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_ELEMENT_POSITIONCHANGED,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::ElementAddAdorner(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_ELEMENT_ADD_ADORNER,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::ElementZchange(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_ELEMENT_ZCHANGE,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::ElementReposition(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_ELEMENT_REPOSITION,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::RangeEnsurerecalc(
    long        cp,
    long        cch,
    CTreeNode * pNode)
{
    InitializeCp(NTYPE_RANGE_ENSURERECALC,
               cp,
               cch,
               pNode,
               NULL,
               0);
}

inline void
CNotification::ElementEnsurerecalc(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_ELEMENT_ENSURERECALC,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::ElementInvalidate(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_ELEMENT_INVALIDATE,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::ElementInvalZDescendants(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_ELEMENT_INVAL_Z_DESCENDANTS,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::ElementMinmax(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_ELEMENT_MINMAX,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::ElementEntertree(
    CElement *  pElement,
    CTreeNode * pNode,
    DWORD       grfFlags)
{
    Initialize(NTYPE_ELEMENT_ENTERTREE,
               pElement,
               pNode,
               NULL,
               grfFlags);
}

inline void
CNotification::ElementExittree1(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Initialize(NTYPE_ELEMENT_EXITTREE_1,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::ElementExittree2(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Initialize(NTYPE_ELEMENT_EXITTREE_2,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::ElementQueryfocussable(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_ELEMENT_QUERYFOCUSSABLE,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::ElementQuerytabbable(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_ELEMENT_QUERYTABBABLE,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::ElementQuerymnemonictarget(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_ELEMENT_QUERYMNEMONICTARGET,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::ElementSettingfocus(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_ELEMENT_SETTINGFOCUS,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::ElementSetfocus(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_ELEMENT_SETFOCUS,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::ElementSetfocusfailed(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_ELEMENT_SETFOCUSFAILED,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::ElementGotmnemonic(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_ELEMENT_GOTMNEMONIC,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::ElementLostmnemonic(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_ELEMENT_LOSTMNEMONIC,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::DisplayChange(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_DISPLAY_CHANGE,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::VisibilityChange(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_VISIBILITY_CHANGE,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::ZparentChange(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_ZPARENT_CHANGE,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::MeasuredRange(
    long        cp,
    long        cch,
    DWORD       grfFlags)
{
    InitializeCp(NTYPE_MEASURED_RANGE,
               cp,
               cch,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::TranslatedRange(
    long        cp,
    long        cch,
    DWORD       grfFlags)
{
    InitializeCp(NTYPE_TRANSLATED_RANGE,
               cp,
               cch,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::UpdateDocDirty(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_UPDATE_DOC_DIRTY,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::FreezeEvents(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_FREEZE_EVENTS,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::AmbientPropChange(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_AMBIENT_PROP_CHANGE,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::UpdateViewCache(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_UPDATE_VIEW_CACHE,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::UpdateDocUptodate(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_UPDATE_DOC_UPTODATE,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::DocStateChange1(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_DOC_STATE_CHANGE_1,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::DocStateChange2(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_DOC_STATE_CHANGE_2,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::SelectChange(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_SELECT_CHANGE,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::Stop1(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_STOP_1,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::Stop2(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_STOP_2,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::EnableInteraction1(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_ENABLE_INTERACTION_1,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::EnableInteraction2(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_ENABLE_INTERACTION_2,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::ActiveMovie(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_ACTIVE_MOVIE,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::BeforeUnload(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_BEFORE_UNLOAD,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::BeforeRefresh(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_BEFORE_REFRESH,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::EditModeChange(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_EDIT_MODE_CHANGE,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::SetCodepage(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_SET_CODEPAGE,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::GetFrameZone(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_GET_FRAME_ZONE,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::DocEndParse(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_DOC_END_PARSE,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::ReleaseExternalObjects(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_RELEASE_EXTERNAL_OBJECTS,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::AreaFocus(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_AREA_FOCUS,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::AreaTabindexChange(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_AREA_TABINDEX_CHANGE,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::GetStartElement(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_GET_START_ELEMENT,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::Command(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_COMMAND,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::SnapShotSave(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_SNAP_SHOT_SAVE,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::FavoritesSave(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_FAVORITES_SAVE,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::FavoritesLoad(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_FAVORITES_LOAD,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::XtagHistorySave(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_XTAG_HISTORY_SAVE,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::XtagHistoryLoad(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_XTAG_HISTORY_LOAD,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::KillSelection(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_KILL_SELECTION,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::SaveHistory1(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_SAVE_HISTORY_1,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::SaveHistory2(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_SAVE_HISTORY_2,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::DelayLoadHistory(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_DELAY_LOAD_HISTORY,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::ClearDirty(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_CLEAR_DIRTY,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::EndParse(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_END_PARSE,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::ClearFormatCaches(
    CElement *  pElement,
    void *      pvData,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_CLEAR_FORMAT_CACHES,
               pElement,
               NULL,
               pvData,
               grfFlags);
}

inline void
CNotification::RecomputeBehavior(
    CElement *  pElement,
    DWORD       grfFlags)
{
    Assert(pElement);
    Initialize(NTYPE_RECOMPUTE_BEHAVIOR,
               pElement,
               NULL,
               NULL,
               grfFlags);
}

inline void
CNotification::ViewAttachelement(
    CElement *  pElement)
{
    Assert(pElement);
    Initialize(NTYPE_VIEW_ATTACHELEMENT,
               pElement,
               NULL,
               NULL,
               0);
}

inline void
CNotification::ViewDetachelement(
    CElement *  pElement)
{
    Assert(pElement);
    Initialize(NTYPE_VIEW_DETACHELEMENT,
               pElement,
               NULL,
               NULL,
               0);
}

inline void
CNotification::BaseUrlChange(
    CElement *  pElement)
{
    Assert(pElement);
    Initialize(NTYPE_BASE_URL_CHANGE,
               pElement,
               NULL,
               NULL,
               0);
}

inline void
CNotification::ZeroGrayChange(
    CElement *  pElement)
{
    Assert(pElement);
    Initialize(NTYPE_ZERO_GRAY_CHANGE,
               pElement,
               NULL,
               NULL,
               0);
}

#undef _NOTIFYTYPE_INLINE_


#endif

